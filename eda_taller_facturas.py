# -*- coding: utf-8 -*-
"""EDA-Taller_Facturas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qdld6QrSdJopxuJTQKyn8QKlWbgTFxI-

**Este script se realizó con el fin de hacer el EDA de las ventas de los años 2011 a 2024**
"""

# Importación de librerías necesarias
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns
print("======================================")
print("version pandas : ",pd.__version__)
print("version numpy : ",np.__version__)
print("version seaborn : ",sns.__version__)
print("version matplotlib : ", matplotlib.__version__)

# Configuración estética para gráficos
sns.set(style="whitegrid")

"""**1. Cargar los datos**"""

# Cargar los datos desde un archivo CSV (o cualquier otro formato)
df = pd.read_csv("/content/drive/MyDrive/Datasets/Facturas-EDA.csv",sep=';')
# Inspección rápida de los datos
df.head()

"""**2. Información del dataframe**"""

print("Tamaño del dataframe")
df.shape

print("Columnas del dataframe")
df.columns

print("Tipos de datos de cada columna")
df.dtypes

print("Información del dataframe")
df.info()

columnas_numericas = ['valor_factura','valor_pago','saldo']
print("Descripción del Dataframe")
df.describe()
#df[columnas_numericas].describe()

"""Validamos si existen espacios en blanco al inicio y/o al final de los campos typo object (los strings)"""

# Identificar columnas tipo object
columnas_object = df.select_dtypes(include=['object'])

# Verificar si hay espacios al inicio o al final
espacios = columnas_object.apply(lambda col: col.str.startswith(' ') | col.str.endswith(' ')).any()

# Mostrar columnas con espacios
columnas_con_espacios = espacios[espacios].index.tolist()
print("Columnas con espacios al inicio o al final:", columnas_con_espacios)

# Eliminamos los espacios en blanco de todas las columnas object (string)
df = df.apply(lambda x: x.str.strip() if x.dtype == "object" else x)
# Eliminar posibles espacios en blanco o al final de los nombres de las columnas
df.columns = df.columns.str.strip()

print("validamos los campos cuantitativos (de valores)")
df['valor_factura']

df['saldo']

df['valor_pago']

"""3. Análisis de valores nulos

"""

print("Contar valores nulos por columna")
df.isnull().sum()

print("Proporción (porcentaje) de valores nulos por columna")
df.isnull().mean() * 100

"""4. Duplicados

"""

print("Verificar si hay filas duplicadas")
cnt_dup = df.duplicated(subset=['id']).sum()
if cnt_dup > 0:
  print("Hay Duplicado, se eliminarán")
  # Contar filas antes de eliminar duplicados
  filas_antes = len(df)
  # Eliminar duplicados
  df = df.drop_duplicates(subset=['id'])
  # Contar filas después de eliminar duplicados
  filas_despues = len(df)
  # Calcular el número de duplicados eliminados
  duplicados_eliminados = filas_antes - filas_despues
  print(f"Se eliminaron {duplicados_eliminados} duplicados.")
else:
  print("No hay numeros de facturas duplicados")

"""5. Validación de tipos de datos"""

df['valor_factura']

"""**Convertir columnas de fechas a formato datetime**"""

df['fecha'] = pd.to_datetime(df['fecha'])
df['fecha_vencto'] = pd.to_datetime(df['fecha_vencto'])
df['fecha_pago'] = pd.to_datetime(df['fecha_pago'], errors='coerce')

# El valor_factura tiene este formato : $2.294.845, como una cadena de caractgeres con el signo $ y los puntos '.'
df['valor_factura'] = df['valor_factura'].str.replace('$', '', regex=False)  # Eliminar el símbolo de dólar
df['valor_factura'] = df['valor_factura'].str.replace('.', '', regex=False)  # Eliminar los puntos

#df['valor_factura'] = df['valor_factura'].astype(int)
df['valor_factura'] = pd.to_numeric(df['valor_factura'], errors='coerce').astype('Int64')

# Modificación de los valores de valor_pago
df['valor_pago'] = df['valor_pago'].str.replace('$', '', regex=False)  # Eliminar el símbolo de dólar
df['valor_pago'] = df['valor_pago'].str.replace('.', '', regex=False)  # Eliminar los puntos
df['valor_pago'] = pd.to_numeric(df['valor_pago'], errors='coerce').astype('Int64')

# Modificación de los valores de saldo
df['saldo'] = df['saldo'].str.replace('$', '', regex=False)  # Eliminar el símbolo de dólar
df['saldo'] = df['saldo'].str.replace('.', '', regex=False)  # Eliminar los puntos
df['saldo'] = pd.to_numeric(df['saldo'], errors='coerce').astype('Int64')
#df['valor_factura'] = df['valor_factura'].astype(int)
print("Revisar nuevamente los tipos de datos")
df.dtypes

"""**6. Rangos de valores (detectar valores atípicos)**"""

#print("Descripción estadística de las columnas numéricas para detectar valores atípicos")
#df.describe()
print("Identificar facturas con valores negativos en \"valor_factura\"")
df[df['valor_factura'] < 0]

"""7. Distribución de valores

"""

print("Distribución de la variable categórica 'tipo'")
df['tipo'].value_counts().plot(kind='bar', title="Distribución de facturas por tipo")
plt.show()
print("Distribución de la columna 'clasif_cartera'")
df['clasif_cartera'].value_counts().plot(kind='bar', title="Clasificación de cartera")
plt.show()

"""8. Estadísticas descriptivas

"""

print("Resumen estadístico de la columna valor_factura")
df['valor_factura'].describe()

print("Resumen estadístico de valor_pago")
df['valor_pago'].describe()

print("Resumen estadístico de saldo")
df['saldo'].describe()

"""**9. Relación entre variables**

Correlación entre columnas numéricas

"""

correlation_matrix = df[   ['valor_factura', 'valor_pago','saldo', 'dias_mora' ]  ].corr()
#print("Mapa de calor de la correlación")
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("Mapa de calor de correlación")
plt.show()

"""10. Análisis de la columna tipo

"""

print("Proporción de facturas por tipo (CO vs CR)")
df['tipo'].value_counts(normalize=True) * 100

"""11. Análisis temporal

"""

print("Agrupar facturas por mes y contar el número de facturas por mes")
df['año_mes'] = df['fecha'].dt.to_period('Y')
print("Número de facturas por Año")
df.groupby('año_mes')['id'].count().plot(kind='line', title="Número de facturas por Año")
plt.show()
df['año_mes'] = df['fecha'].dt.to_period('M')
print("Número de facturas por Mes")
df.groupby('año_mes')['id'].count().plot(kind='line', title="Número de facturas por mes")
plt.show()

"""12. Análisis de morosidad

"""

print("Distribución de los días de mora")
df['dias_mora'].plot(kind='hist', bins=30, title="Distribución de días de mora", color='red')
plt.show()
print("Proporción de facturas por clasificación de cartera")
df['clasif_cartera'].value_counts().plot(kind='pie', autopct='%1.1f%%', title="Proporción de clasificación de cartera")
plt.show()

"""13. Análisis de pagos

"""

print("Comparar valor de factura con valor pagado")
df['porcentaje_pagado'] = df['valor_pago'] / df['valor_factura'] * 100
df['porcentaje_pagado'].plot(kind='hist', bins=10, title="Distribución del porcentaje pagado")
plt.show()

"""14. Análisis geográfico

"""

print("Total facturado por departamento")
facturado_por_depto = df.groupby('nombre_departamento')['valor_factura'].sum()
facturado_por_depto.plot(kind='bar', title="Total facturado por Departamento")
plt.show()

"""15. Análisis de saldo

"""

print("Facturas con saldo pendiente")
df[df['saldo'] > 0].groupby('Cliente')['saldo'].sum().sort_values(ascending=False).head(10)

"""16. Análisis de clientes

"""

print("Los 10 clientes con mayor valor facturado")
top_10_clientes_facturado = df.groupby('Cliente')['valor_factura'].sum().sort_values(ascending=False).head(10)
print(top_10_clientes_facturado)
print("\n\nLos 10 clientes con mayor saldo pendiente")
top_10_clientes_saldo = df.groupby('Cliente')['saldo'].sum().sort_values(ascending=False).head(10)
print(top_10_clientes_saldo)

"""17. Análisis de días de vencimiento

"""

#print("Relación entre los días de mora y los días facturados")
#sns.scatterplot(x='dias_factura', y='dias_mora', data=df)
#plt.title("Relación entre días de factura y días de mora")
print("Relación entre la facturacion y los saldos")
sns.scatterplot(x='valor_factura', y='valor_pago', data=df)
plt.title("Relación entre la facturacion y los saldos")
plt.show()

"""18. Facturas vencidas

"""

print("Facturas vencidas con saldo pendiente")
facturas_vencidas = df[(df['fecha_vencto'] < pd.to_datetime('today')) & (df['saldo'] > 10000000)]
#facturas_vencidas
try:
    print("Hay facturas vencidas")
    facturas_vencidas.groupby(facturas_vencidas['fecha_vencto'].dt.to_period('M')).size().plot(kind='bar', title="Facturas vencidas por mes")
    plt.show()
except NameError:
    print("No hay facturas vencidas")

"""19. Gráficos de barras y pastel

"""

print("Gráfico de barras para los departamentos")
df['nombre_departamento'].value_counts().plot(kind='bar', title="Número de facturas por departamento")
plt.show()
print("Gráfico de pastel para `clasif_cartera`")
#df['clasif_cartera'].value_counts().plot(kind='pie', autopct='%1.1f%%', title="Proporción de clasificación de cartera")
df['clasif_cartera'].value_counts().plot(kind='pie', autopct='%1.0f%%', title="Proporción de clasificación de cartera")
plt.show()